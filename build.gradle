buildscript {
    repositories {
        mavenCentral()
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE"
        classpath("io.freefair.gradle:lombok-plugin:8.3")
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.6.4"

    }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'io.freefair.lombok'

ext {
    set('springCloudVersion', "2021.0.7")
    set('springBootBomVersion', "2.6.4")
    set('mapstructVersion', "1.5.1.Final")
}

allprojects {
    group 'ru.fotoochkarik'
    repositories {
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
    }
    apply plugin: "io.spring.dependency-management"
    group 'ru.fotoochkarik'
    version '1.0.0-SNAPSHOT'
    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootBomVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }
}

subprojects {
    apply plugin: "io.spring.dependency-management"
    group 'ru.fotoochkarik'
    version '1.0.0-SNAPSHOT'
    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootBomVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }
}

compileJava.inputs.files(processResources)

configurations.all {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    resolutionStrategy {
        cacheChangingModulesFor(0, "seconds")
        cacheDynamicVersionsFor(0, "seconds")
    }
}

dependencies {
    implementation project(':ms-check-collector-api-generated')

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'io.github.openfeign.form:feign-form-spring:3.8.0'
    implementation 'io.github.openfeign.form:feign-form:3.8.0'
    implementation 'io.github.openfeign:feign-okhttp'

    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    implementation 'org.liquibase:liquibase-core'
    implementation 'net.lbruun.springboot:preliquibase-spring-boot-starter:1.1.1'

    runtimeOnly 'org.postgresql:postgresql'
    compileOnly 'org.projectlombok:lombok'
    testImplementation 'io.zonky.test:embedded-database-spring-test:2.1.1'
    implementation 'io.zonky.test:embedded-postgres:2.0.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.instancio:instancio-core:3.7.1'
}

tasks.named('test') {
    useJUnitPlatform()
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

tasks.withType(Test) {
    systemProperty "file.encoding", "UTF-8"
}

javadoc {
    options.encoding = 'UTF-8'
}

jar {
    enabled = true
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier.set("sources")
}

bootJar {
    archiveFileName = 'ms-check-collector.jar'
    launchScript()
}